//- 
    Version Information

    Form Creator Mixin v 0.0.3
    Ionic version
    Created by Victor Miracle on august 16, 2017
    Last updated august 16, 2017 by Victor Miracle
    Property of Koi Software

    Version History

    0.0.3
        -Up-to-date with v0.0.3 of Form Creator for ng2-materialize
        -When given the exact same input, it will produce a form with similar
         structure to that of a ng2-materialize form. When incompatibility
         arises, the Ionic version should still produce a correct output,
         minus any elements that are incompatible in Ionic

    Notes:

    -Current version supports 6 types of form elements. Other elements must
     be created directly in the .pug file, or added to this file
    -Forms can be created with sections, rows, a single section, a single
     row or a single column
    -When modifying this file, please note that all elements must have an
     explicitly declarated type
    -ngIf can be used in any element
    -ngFor should be used in row and section wrappers. If they must be used
     elsewhere, consider first if your design really needs an ngFor in any
     place other than rows or sections
    -Pay attention to attributes. HTML attributes (i.e., "id" and "class")
     are usually strings wrapped in double quotes ("example"), but Angular
     attributes (i.e. [label], [icon], [hidden]) are strings wrapped in both
     single AND double quotes ("'example'"). This only applies to strings, if
     your attribute points to a variable in your TypeScript file, it is only
     wrapped in double OR single quotes ("exampleObject.exampleAttribute", 
     "exampleVariable")
    -When naming attributes consider the use of the attribute rather than the
     name of the corresponding HTML attribute. (i.e. in text inputs, label 
     refers the label attribute of the text input, whereas in an option element
     label refers to the inner HTML of the option, since there is no label
     attribute for options but the innerHTML of the option is what is displayed
     in the final HTML element)

    -IMPORTANT: Attributes preceded with "NC: " (Not Compatible) are not
     currently useable with this version, either because they are not supported
     by Ionic, they are not needed on the mobile version or they haven't been
     written yet. "id" and "class" are not used by Ionic, so they won't appear
     at all.
    -IMPORTANT: This version has to be kept up-to date with the main version
     (the ng2-materialize one) in order to be able to use the same objects
     to create forms on the mobile version. Refer to documentation to do so.
    -IMPORTANT: Should you remove comments in order to create a "production" 
     version, keep the Version Information section and this note, specially if
     your project uses another version of Form Creater Mixin (i.e. Ionic)

//- Form Mixin - Last updated on v0.0.3
    Form wrapper
    Creates a form for purposes of submitting

    formObject

    {
        "name"     : String, // The name of the form, can be any string
        "method"   : String, // A string that matches "POST|GET"
        "target"   : String, // A target that indicates where to display the response after subitting the form, "_blank|_self|_parent|_top|framename"
        "action"   : String, // A URL for the form to be submitted to. Any string is valid, but it must be a valid URL to actually do something
        "contents" : Object, // A sections, section, rows, row or column object.
        "ngFor"    : String, // Angular's ngFor attribute. Must be a string with the correct syntax. Example: "let value of arrayVar"
        "ngIf"     : String  // Angular's ngIf attribute. Usually a boolean value in the corresponding component
    }

mixin ion-form(formObject)
    form(name= formObject.name method= formObject.method target= formObject.target action= formObject.action "*ngFor"= formObject.ngFor id= formObject.id "*ngIf"= formObject.ngIf)
        if formObject.contents.type == "rows"
            ion-grid()
                +ion-print-rows(formObject.contents)
        else if formObject.contents.type == "row"
            ion-grid()
                ion-row()
                    +ion-print-row(formObject.contents)
        else if formObject.contents.type == "column"
            ion-grid()
                ion-row()
                    ion-column()
                        +ion-print-column(formObject.contents)
        else if formObject.contents.type == "sections"
            ion-grid()
                +ion-print-sections(formObject.contents)
        else if formObject.contents.type == "section"
            ion-grid()
                +ion-print-section(formObject.contents)

//- Rows Mixin - Last updated on v0.0.3
    Rows Object

    {
        "type" : "rows",       // Explicit declaration of object type
        "rows" : Array[Object] // An array of row objects
    }

mixin ion-print-rows(rowsObject)
    each row in rowsObject.rows
        ion-row()
            +ion-print-row(row)

//- Row Mixin - Last updated on v0.0.3
    Row object

    {
        "type"    : "row",  // Explicit declaration of object type
        "classes" : String, // Any number of classes contained in one string, separated by spaces
        "ngFor"   : String, // Angular's ngFor attribute. Must be a string with the correct syntax. Example: "let value of arrayVar"
        "column"  : Object  // A single column object
    }

mixin ion-print-row(rowObject)
    each column in rowObject.columns
        -var columnClasses = "col";
        -if(column.size_s){ columnClasses = "col-" + column.size_s; }
        -if(column.size_m){ columnClasses = "col-" + column.size_m; }
        -if(column.size_l){ columnClasses = "col-" + column.size_l; }
        ion-col(something= columnClasses "*ngFor"= column.contents.ngFor)
            +ion-print-column(column)

//- Column Mixin - Last updated on v0.0.3
    Column object

    {
        "type"     : "column", // Explicit declaration of object type
        "classes"  : String,   // Any number of classes contained in one string, separated by spaces
        "contents" : Object    // A object of any of the supported types, currently text|password|textarea|checkbox|radio|select
    }

mixin ion-print-column(columnObject)
    if columnObject.contents.type == "text"
        +ion-input(columnObject.contents)
    else if columnObject.contents.type == "password"
        +ion-input(columnObject.contents)
    else if columnObject.contents.type == "textarea"
        +ion-textarea(columnObject.contents)
    else if columnObject.contents.type == "checkbox"
        +ion-checkbox(columnObject.contents)
    else if columnObject.contents.type == "radio"
        +ion-radio-button(columnObject.contents)
    else if columnObject.contents.type == "select"
        +ion-select(columnObject.contents)

//- Sections Mixin - Last updated on v0.0.3
    Sections Object

    {
        "type"     : "sections",   // Explicit declaration of object type
        "sections" : Array[Object] // An array of section objects
    }

mixin ion-print-sections(sectionObject)
    each section in sectionObject.sections
        +ion-print-section(section)

//- Section Mixin - Last updated on v0.0.3
    Section Object

    {
        "type"     : "section", // Explicit declaration of object type
        "classes"  : String,    // Any number of classes contained in one string, separated by spaces
        "contents" : Object     // A single object, either a rows or a section object
    }

mixin ion-print-section(sectionObject)
    if sectionObject.contents.type == "rows"
        +ion-print-rows(sectionObject.contents)
    else if sectionObject.contents.type == "section"
        +ion-print-section(sectionObject.contents)

//- Text input mixin - Last updated on v0.0.3
    Creates a Materialize text input object

    inputObject
    {
        "type"    : "password|text", // Explicit declaration of object type. Currently, mz-input supports password and text type
        NC: "id"      : String,          // Any string for the id attribute of the <ion-input> element. It must be unique within the DOM
        NC: "classes" : String,          // Any number of classes contained in one string, separated by spaces
        "label"   : String,          // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "target"  : String,          // ngModel data binding target
        NC: "icon"    : String,          // A string that indicates a variable or object attribute in TypeScript that is to be used as an icon (https://materialdesignicons.com/). A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
    }

mixin ion-input(inputObject)
    ion-item()
        ion-label(floating)= inputObject.label
        ion-input(type= "text" placeholder= inputObject.placeholder)

//- Text area mixin - Last updated on v0.0.3
    Creates a Materialize text area with a textarea object

    textareaObject
    {
        "type"        : "textarea", // Explicit declaration of object type
        "id"          : String,     // Any string for the id attribute of the <textarea mz-textarea> element. It must be unique within the DOM
        "classes"     : String,     // Any number of classes contained in one string, separated by spaces
        "label"       : String,     // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "placeholder" : String,     // A placeholder for the textarea, to be displayed when the textarea is empty
        "length"      : Number,     // A number that indicates the maximum lenght of the string inside the textarea
        "name"        : String,     // A name for the textarea. Must be unique within the form context.
        "icon"        : String      // A string that indicates a variable or object attribute in TypeScript that is to be used as an icon (https://materialdesignicons.com/). A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
    }

mixin ion-textarea(textareaObject)
    ion-item()
        ion-label('floating')= textareaObject.label
        ion-textarea(placeholder= textareaObject.placeholder)

//- Checkbox mixin - Last updated on v0.0.3
    Creates a Materialize checkbox input object

    inputObject
    {
        "type"    : "checkbox", // Explicit declaration of object type
        "id"      : String,     // Any string for the id attribute of the <input mz-checkbox> element. It must be unique within the DOM
        "classes" : String,     // Any number of classes contained in one string, separated by spaces
        "label"   : String,     // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "target"  : String,     // ngModel data binding target
        "name"    : String      // A name for the checkbox. Must be unique within the form context.
    }

mixin ion-checkbox(checkboxObject)
    ion-item()
        ion-label()= checkboxObject.label
        ion-checkbox('[(ngModel)]'= checkboxObject.target)

//- Radio button mixin - Last updated on v0.0.3
    Creates a Materialize text input

    inputObject
    {
        "type"    : "radio", // Explicit declaration of object type
        "id"      : String,  // Any string for the id attribute of the <input mz-radio-button> element. It must be unique within the DOM
        "classes" : String,  // Any number of classes contained in one string, separated by spaces
        "label"   : String,  // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "name"    : String,  // A name for the radio button. Must be unique within the form context
        "gap"     : Boolean, // Boolean that indicates if the radio button must have a gap when selected (true) or if it must be filled entirely (false)
        "value"   : String   // String that indicates what value will be read from the selected radio button
    }

mixin ion-radio-button(radioButtonObject)
    ion-item()
        ion-label()= radioButtonObject.label
        ion-radio(value= radioButtonObject.value)

//- Select Mixin - Last updated on v0.0.3
    Creates a Materialize select input

    selectObject
    {
        "id":         : String,        // Any string for the id attribute of the <select> element. It must be unique within the DOM
        "classes"     : String,        // Any number of classes contained in one string, separated by spaces
        "name"        : String,        // A name for the radio button. Must be unique within the form context
        "label"       : String,        // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "placeholder" : String,        // A placeholder for the select, to be displayed when the select has it's default value. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
        "target"      : String,        // ngModel data binding target
        "options"     : Array[Object]  // An array of option objects (shown below)
    }
    
mixin ion-select(selectObject)
    ion-item()
        ion-label()= selectObject.label
        ion-select(interface= "popover" '[(ngModel)]'= selectObject.target)
            each option in selectObject.options
                +ion-option(option)

//- Option Mixin - Last updated on v0.0.3
    Creates a Materialize option for a Materialize select input

    optionObject
    {
        "id"      : String, // Any string for the id attribute of the <option> element. It must be unique within the DOM
        "classes" : String, // Any number of classes contained in one string, separated by spaces
        "value"   : String, // String that indicates what value will be read from the selected option
        "label"   : String  // A string that indicates a variable or object attribute in TypeScript that is to be used as a label. A string must be wrapped in double AND single quotes ("'example'"), while a variable must be wrapped only in double OR single quotes
    }

mixin ion-option(optionObject)
    ion-option(value= optionObject.value)= optionObject.label